# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from ast import Pass
from datetime import datetime
from random import random
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QApplication, QDialog, QMainWindow, QPushButton, QMessageBox
from PyQt6 import uic,QtWidgets
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
import sqlite3
import sys




from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(433, 347)
        MainWindow.setMinimumSize(QtCore.QSize(433, 347))
        MainWindow.setMaximumSize(QtCore.QSize(433, 347))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.labelFundo = QtWidgets.QLabel(self.centralwidget)
        self.labelFundo.setGeometry(QtCore.QRect(0, 0, 441, 351))
        self.labelFundo.setText("")
        self.labelFundo.setPixmap(QtGui.QPixmap("login.png"))
        self.labelFundo.setObjectName("labelFundo")
        self.lineEditUsuario = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditUsuario.setGeometry(QtCore.QRect(240, 115, 151, 21))
        self.lineEditUsuario.setObjectName("lineEditUsuario")
        self.lineEditSenha = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditSenha.setGeometry(QtCore.QRect(240, 160, 151, 21))
        self.lineEditSenha.setObjectName("lineEditSenha")
        self.pushButton_ENTRAR = QtWidgets.QPushButton(self.centralwidget,clicked=self.verifica)
        self.pushButton_ENTRAR.setGeometry(QtCore.QRect(280, 200, 71, 21))
        self.pushButton_ENTRAR.setObjectName("pushButton_ENTRAR")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_ENTRAR.setText(_translate("MainWindow", "ENTRAR"))

    def verifica(self):
            conn=sqlite3.connect('Banco.db')
            c=conn.cursor()
            sql="SELECT * FROM login where id=1"
            c.execute(sql)
            resultado=c.fetchall()
            nomeusuario=self.lineEditUsuario.text()
            nomeusuario=str(nomeusuario)
            senhausuario=self.lineEditSenha.text()
            senhausuario=str(senhausuario)
            
            print(resultado)
            for r in resultado:
                id,usuarioC,senhaC=r
                id=str(id)
                usuarioC=str(usuarioC)
                senhaC=str(senhaC)
                print(id,usuarioC,senhaC)
                if nomeusuario==usuarioC and senhausuario==senhaC:
                    Passou=main.show()
                    print("funcionou")
                    MainWindow.close()
                else:
                    print('erro')
            return Passou

if __name__ == "__main__":

    def chama_main():
        main.close()
        main.show()
    def chama_cadastro_categoria():
        cadastro.close()
        categoria.show()
        categoria.pushButtonCadastrarCategoria.clicked.connect(inseri_categoria)
    def cadastro_senha():
        cadastro.close()
        cadastro.pushButton.clicked.connect(inseri_cadastro_senha)
        cadastro.pushButtonATUALIZAcategoria.clicked.connect(busca_categoria)
        cadastro.show()
    def relatori():
        relatorios.close()
        relatorios.show()
        relatorios.pushButton_CONFIRMAR_CATEGORIA.clicked.connect(relatorio_busca_categoria)
        relatorios.pushButton_cONFIRMAR.clicked.connect(relatorio_busca_usario)
        relatorios.pushButton_2.clicked.connect(puxar)
        relatorios.pushButton_ATUALIZAR.clicked.connect(atualizar_cadastro_cliente)
        relatorios.pushButton.clicked.connect(deletar_cadastro_usuario)
        relatorios.pushButtonGERAR.clicked.connect(gerarPDF)
    def busca_categoria(self):
        sql="SELECT * FROM Categoria"
        try:
            cadastro.comboBoxCATEGORIA.clear()
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            resultado = c.fetchall()
            print(resultado)
            for r in resultado:
                id,categoris= r
                id=id
                categoris=str(categoris)
                cadastro.comboBoxCATEGORIA.addItem(categoris)
        except:
            print('erro')
    def inseri_categoria(self):
        categori=categoria.lineEditCategoria.text()
        categori=str(categori)
        categori=categori.upper()
        print(categori)
        sql="INSERT INTO Categoria(categoria) VALUES('"+categori+"')"
        try:
            conn=sqlite3.connect('Banco.db')
            c = conn.cursor()
            c.execute(sql)
            conn.commit()
            QMessageBox.about(MainWindow, "Cadastrado", "CATEGORIA CADASTRADA!")
            categoria.lineEditCategoria.setText('')
        except:
             QMessageBox.about(MainWindow, "Cadastrado", "ESSA CATEGORIA JÁ ESTA CADASTRADA!")
             categoria.lineEditCategoria.setText('')

    def inseri_cadastro_senha(self):
        nomeEmail=str(cadastro.lineEditEMAILeUSUARIO.text())
        senha=str(cadastro.lineEditSENHA.text())
        categoria=str(cadastro.comboBoxCATEGORIA.currentText())
        obs=str(cadastro.plainTextEdit_obs.toPlainText())
        print(nomeEmail,senha,categoria,obs)
        
        sql="INSERT INTO senhas(email,senha,categoria,obs)  VALUES('"+nomeEmail+"','"+senha+"','"+categoria+"','"+obs+"')"
        try:
            conn=sqlite3.connect('Banco.db')
            c = conn.cursor()
            c.execute(sql)
            conn.commit()
            QMessageBox.about(MainWindow, "Cadastrado", "EMAIL/USUARIO CADASTRADO!")
            cadastro.lineEditEMAILeUSUARIO.setText('')
            cadastro.lineEditSENHA.setText('')
            cadastro.comboBoxCATEGORIA.clear()
            cadastro.setPlainText(' ')
        except:
             QMessageBox.about(MainWindow, "Cadastrado", "ESSE USUARIO JÁ ESTA CADASTRADO!")
     
    def relatorio_busca_categoria():
        sql="SELECT * FROM Categoria"
        try:
            relatorios.comboBoxPUXACATEGORIA.clear()
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            resultado = c.fetchall()
            print(resultado)
            for r in resultado:
                id,categoris= r
                id=id
                categoris=str(categoris)
                relatorios.comboBoxPUXACATEGORIA.addItem(categoris)
        except:
            print('erro')         
    def relatorio_busca_usario():
        sql="SELECT * FROM senhas"
        try:
            relatorios.comboBox_USUARIO.clear()
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            resultado = c.fetchall()
            print(resultado)
            for r in resultado:
                id,categoris,senha,categoria,obs= r
                categoris=str(categoris)
                relatorios.comboBox_USUARIO.addItem(categoris)
        except:
            print('erro')
    def puxar():
        nome=str(relatorios.comboBox_USUARIO.currentText())
        sql="SELECT * FROM senhas where email='"+nome+"'"
        try:
            relatorios.comboBox_USUARIO.clear()
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            resultado = c.fetchall()
            print(resultado)
            for r in resultado:
                id,categoris,senha,categoria,obs= r
                categoris=str(categoris)
                senha=str(senha)
                id=str(id)
                obs=str(obs)
                relatorios.lineEdit_NOVO_NOME.setText(categoris)
                relatorios.lineEdit_2_NOVA_SENHA.setText(senha)
                relatorios.plainTextEdit.setPlainText(obs)
                relatorios.label_id.setText(id)
        except:
            print('erro')
        
    def atualizar_cadastro_cliente():
        nome=str(relatorios.lineEdit_NOVO_NOME.text())
        senha=str(relatorios.lineEdit_2_NOVA_SENHA.text())
        obs=str(relatorios.plainTextEdit.toPlainText())
        id=str(relatorios.label_id.text())
        sql="UPDATE senhas set email='"+nome+"',senha='"+senha+"',obs='"+obs+"' WHERE id="+id+""
        try:
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            conn.commit()
            conn.close()
            QMessageBox.about(MainWindow, "REGISTRO", "REGISTRO ATUALIZADO!")   
            relatorios.lineEdit_NOVO_NOME.setText('')
            relatorios.lineEdit_2_NOVA_SENHA.setText('')
            relatorios.plainTextEdit.setPlainText('')
            relatorios.label_id.setText('ID')
            
        except:
            QMessageBox.about(MainWindow, "ERRO", "INFORMAÇÃO INCOMPATIVEL!!")
            Pass
    def deletar_cadastro_usuario():
        nome=str(relatorios.comboBox_USUARIO.currentText())   
        sql="DELETE FROM senhas where email='"+nome+"'"   
        try:
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            conn.commit()
            conn.close() 
            QMessageBox.about(MainWindow, "SUCESSO!", "INFORMAÇÃO APAGADA!!")
        except:
            QMessageBox.about(MainWindow, "ERRO", "INFORMAÇÃO INCOMPATIVEL!!")
            Pass
    def gerarPDF():
        categoria=str(relatorios.comboBoxPUXACATEGORIA.currentText())
        sql="SELECT * FROM senhas where categoria='"+categoria+"'"
        cnv=canvas.Canvas(categoria+'PDF.pdf')
        try:
            conn = sqlite3.connect('banco.db')
            c = conn.cursor()
            c.execute(sql)
            resultado = c.fetchall()
            print(resultado)
            eixo=750
            for r in resultado:
                id,usuario,senha,categoria,obs= r
                id=str(id)
                usuario=str(usuario)
                senha=str(senha)
                categoria=str(categoria)
                obs=str(obs)
                juncao="ID: "+id+"| Usuario: "+usuario+" | Senha: "+senha+"  | Obs:"+obs
                print(juncao)
                cnv.drawString(5,eixo," "+juncao)
                cnv.drawString(5,eixo+10,"------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
                eixo+=15
            cnv.save()
            QMessageBox.about(MainWindow, "SUCESSO!", "PDF GERADO!!")
        except:
            print('erro')
        
        
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    main=uic.loadUi("main.ui")
    cadastro=uic.loadUi("cadastro.ui")
    categoria=uic.loadUi("CATEGORIA.ui")
    relatorios=uic.loadUi("RELATORIO.ui")



    #chamando itens do main#
    main.actionGuarda_Senha.triggered.connect(cadastro_senha)
    main.actionCategorias.triggered.connect(chama_cadastro_categoria)
    main.actionRela_o_de_Senhas.triggered.connect(relatori)
    MainWindow.show()
    sys.exit(app.exec())
